openapi: 3.0.2
info:
  version: 1.0.0
  title: Language School API
  contact:
    name: Simon Adams   
    email: sjadams@gmail.com
  description: |-
    This is a RESTful Server based on the OpenAPI 3.0 specification.
#  license:
#    name: Proprietary License
#    url: 'https://en.wikipedia.org/wiki/Proprietary_software'
#security:
#  - BasicAuth: []
paths:
  '/students':
    get:
      tags:
        - Students
      summary: Search students
      description: 'If name parameter passed will search on name, if not all Students returned.'
      operationId: findStudents
      parameters:
        - name: name
          in: query
          description: 'Search does LIKE "name%"'
          required: false
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Students'
        '400':
          $ref: '#/components/responses/400'
        '403':
          $ref: '#/components/responses/403'
        '422':
          $ref: '#/components/responses/422'
        '500':
          $ref: '#/components/responses/500'
    post:
      tags:
        - Students
      summary: Create student
      description: 'Create new student.'
      operationId: createStudent
      requestBody:
        #description: Created
        content:
          application/json:
            schema:
              #$ref: '#/components/schemas/Students'
              type: object
              properties:
                name:
                  type: string
                  example: 'John'
                surname:
                  type: string
                  example: 'Smith'
                identification_number:
                  type: string
                  example: 'JS0001'
                country:
                  type: string
                  example: 'MT'
                date_of_birth:
                  type: string
                  example: '1974-12-25 00:00:00'
                registered_on:
                  type: string
                  example: '2021-12-25 00:00:00'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                type: object
                properties:
                  student_id:
                    type: integer
                    format: int32
                    example: 10
        '400':
          $ref: '#/components/responses/400'
        '403':
          $ref: '#/components/responses/403'
        '422':
          $ref: '#/components/responses/422'
        '500':
          $ref: '#/components/responses/500'
  '/students/{student_id}':
    get:
      tags:
        - Students
      summary: Get student
      description: 'My description.'
      operationId: getStudentById
      parameters:
        - name: student_id
          in: path
          description: 'The ID that needs to be fetched.'
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Students'
        '400':
          $ref: '#/components/responses/400'
        '403':
          $ref: '#/components/responses/403'
        '422':
          $ref: '#/components/responses/422'
        '500':
          $ref: '#/components/responses/500'
    put:
      tags:
        - Students
      summary: Update student
      description: 'My description.'
      operationId: updateStudent
      parameters:
        - name: student_id
          in: path
          description: ID that need to be updated
          required: true
          schema:
            type: string
      requestBody:
        description: Update an existing student
        content:
          application/json:
            schema:
              #$ref: '#/components/schemas/Students'
              type: object
              properties:
                name:
                  type: string
                  example: 'John'
                surname:
                  type: string
                  example: 'Smith'
                identification_number:
                  type: string
                  example: 'JS0001'
                country:
                  type: string
                  example: 'MT'
                date_of_birth:
                  type: string
                  example: '1974-12-25 00:00:00'
                registered_on:
                  type: string
                  example: '2021-12-25 00:00:00'              
      responses:
        '200':
          $ref: '#/components/responses/200'
        '400':
          $ref: '#/components/responses/400'
        '403':
          $ref: '#/components/responses/403'
        '422':
          $ref: '#/components/responses/422'
        '500':
          $ref: '#/components/responses/500'
components:
#  securitySchemes:
#    BasicAuth:
#      type: http
#      scheme: basic
  responses:
    '200':
      description: OK.
      content:
        application/json: {}
    '201':
      description: Created.
      content:
        application/json: {}
    '204':
      description: Successfully processed.
      content:
        application/json: {}
    '400':
      description: Bad request.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            error:
              message: Your request does not seem to be valid.
              details:
                - message: 'A more detailed report, if available.'
    '401':
      description: Authorization information is missing or invalid.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            error:
              message: Authorization information is missing or invalid.
    '403':
      description: Forbidden.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            error:
              message: Forbidden. You are not allowed to access this location.
    '404':
      description: Not Found.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            error:
              message: Not Found.
    '405':
      description: Method not allowed.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            error:
              message: Request Method not allowed.
    '406':
      description: Not acceptable.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            error:
              message: The requested format is not supported.
    '415':
      description: Unsupported Media Type.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            error:
              message: The media type is not supported.
    '422':
      description: Unprocessable Entity.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            error:
              message: Input validation failed
              details:
                - field: email
                  message: Invalid email address.
    '500':
      description: Unexpected error.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            error:
              message: Unexpected internal Server Error.
              details:
                - message: 'A more detailed report, if available.'
    '503':
      description: 'Service Unavailable, e.g. Maintenance.'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            error:
              message: Service Unavailable.
              details:
                - message: Barakuda is currently under maintenance.
  schemas:
    Students:
      type: object
      properties:
        id:
          type: integer
          format: int32
          example: 10
        name:
          type: string
          example: 'John'
        surname:
          type: string
          example: 'Smith'
        identification_number:
          type: string
          example: 'JS0001'
        country:
          type: string
          example: 'MT'
        date_of_birth:
          type: string
          example: '1974-12-25 00:00:00'
        registered_on:
          type: string
          example: '2021-12-25 00:00:00'
#    Students:
#      required:
#        - students
#      properties:
#        students:
#          type: array
#          description: List of students
#          items:
#            $ref: '#/components/schemas/Student'
    Error:
      required:
        - error
      properties:
        error:
          type: object
          required:
            - message
          properties:
            message:
              type: string
              description: The error message
            details:
              type: array
              items:
                $ref: '#/components/schemas/ErrorDetails'
              description: The error details (e.g. validation errors)

    ErrorDetails:
      properties:
        field:
          type: string
          description: The name of the invalid field
        message:
          type: string
          description: The error message
